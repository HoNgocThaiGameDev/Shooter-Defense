using SWS;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.AI;

public class EnemyControl : FSM_System
{
    public int hp = 20;
    public int damage = 5;

    public float range_Detect;
    public float range_Attack;
    public float attack_speed;
    public float time_count_attack = 0;
    protected int critical;
    public Transform trans;
    public CharacterControl characterControl;
    public NavMeshAgent agent_;
    public bool isMoveAgent;
    public float time_delay_agent = 0;
    public splineMove splineMove_;
    protected Bulletdata bulletdata;
    public Transform anchor_Hub;
    private void Awake()
    {
        trans = transform;
        GameObject char_object = GameObject.FindGameObjectWithTag("Player");
        characterControl = char_object.GetComponent<CharacterControl>();
  
    }
    public virtual void Setup(ConfigEnemyRecord configEnemy)
    {
        hp = configEnemy.HP;
        damage = configEnemy.Damage;
        // Debug.LogError(" enemy init ");
        int index = 0;
        trans.position = SceneConfig.instance.GetPointSpawn(out index).position;
        int min = index * 3 +1;
        int max = min + 3;
        string path = "Path_" + UnityEngine.Random.Range(min, max);
        splineMove_.pathContainer = WaypointManager.Paths[path];
        // create Hub
        EnemyHub enemyhub = BYPoolManager.instance.dic_pool["Enemyhub"].Spawned().GetComponent<EnemyHub>();
        enemyhub.Init(IngameUI.instance.parent_Hub, anchor_Hub);
    }
    // Start is called before the first frame update
    void Start()
    {


    }
    public void OnDead()
    {
        MissionManager.instance.EnemyOnDead(this);
        Invoke("DelayDestroy", 3);
    }
    private void DelayDestroy()
    {
        Destroy(gameObject);
    }
    // Update is called once per frame
    public override void Update()
    {
        base.Update();
        time_count_attack += Time.deltaTime;
    }

    public virtual void OnDamage(Bulletdata bulletdata)
    {
        
    }
    public void Attack()
    {

    }
    public void Attack(int rate)
    {

    }

    private void OnDrawGizmos()
    {
        Gizmos.color = Color.yellow;
        Gizmos.DrawWireSphere(transform.position, range_Detect);
    }

}

// monoBehavior->EnemyCOntrol->ogreControle,ZombieControl