using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class CharacterControl : MonoBehaviour
{
    public Transform trans;
    public float speed_move;
    [NonSerialized]
    public CharacterDataBinding dataBinding;
    public bool isAim = false;
    public CharacterController characterControl_;
    private void Awake()
    {
        trans = transform;
        dataBinding = gameObject.GetComponent<CharacterDataBinding>();
    }
    // Start is called before the first frame update
    void Start()
    {
        GameManager.instance.ShowInfo();
    }
    public void OnDamage(int damage)
    {
        Debug.LogError(" character hit : " + damage);
        Debug.LogError(" game: " + GameManager.instance.sample);
    }
    // Update is called once per frame
    void Update()
    {
        //if(Input.GetMouseButton(0))
        //{
        //    isAim = true;
        //}
        //else
        //{
        //    isAim = false;
        //}
        isAim = Input.GetMouseButton(0);
        float speed_mul_aim = speed_move > 2 ? 2 : 1;
        float x = Input.GetAxis("Horizontal");// -1->0->1
      //  x = Input.GetAxisRaw("Horizontal");//-1,0,1
        float z = Input.GetAxis("Vertical");
        Vector3 delta_move = new Vector3(x, 0, z);
        if(!isAim)// isAim==false , isAim==true
        {
            if (delta_move.magnitude > 0)//>,>=,==,!=
            {
                trans.forward = delta_move;
                // trans.position = trans.position + delta_move * Time.deltaTime * speed_move;
              
            }
          

            float speed_anim = delta_move.magnitude;
           
            //if(speed_move>2)
            //{
            //    speed_mul_aim = 2;
            //}
            //else
            //{
            //    speed_mul_aim = 1;
            //}
            dataBinding.MoveDir = new Vector3(0,0,speed_anim* speed_mul_aim);
        }
        else
        {
           
            // quay vector 
            //  Vector3 move_dir_anim = trans.rotation * delta_move;
            // move 8 dir
            Vector3 move_dir_anim = trans.InverseTransformDirection( delta_move);
         
            dataBinding.MoveDir = move_dir_anim*speed_mul_aim;

          

        }

        // trans.position = trans.position + delta_move * Time.deltaTime * speed_move;

        if(!characterControl_.isGrounded)
        {
            delta_move.y = -1;
        }
        characterControl_.Move(delta_move * Time.deltaTime * speed_move);

    }
}
